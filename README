----------------------------
1- Repository Contents 
----------------------------

- The GenoM3 specification of the functional components of a variation of the RobNav terrestrial navigation developed at LAAS. There are 4  subfolders, each containing a .gen specification for a component. Some services are commented because they are not used in this application.

- The all.gen file #includes all the .gen specification files.

- The UPPAAL (.xta) specification translated automatically from its GenoM3 counterpart. The body of the "client" process is adapted manually according to the application. 

- The query file (.q) for verifying the properties of interest.


----------------------------
2- Requirements
----------------------------

- To reproduce the experiment (generate the .xta automatically), it is required to have installed:

	- GenoM3: clone from git://redmine.laas.fr/laas/users/felix/genom3-fiacre/genom3-wcet.git

	- GenoM3->UPPAAL template (extended with schedulers): clone from git://redmine.laas.fr/laas/users/mfoughal/uppaal_schedulers.git

	- UPPAAL 4.1.19: available on www.uppaal.org -> downloads

- This artefact has been tested with UPPAAL 4.1.19 on Mac OS High Sierra and Ubuntu 14.04. If you encounter any issue with any other UPPAAL or OS version, please report the bug to UPPAAL developers at bug-uppaal@list.it.uu.se
 
----------------------------
3- How to
----------------------------

- GenoM3 to UPPAAL

	- First, install GenoM3 and the UPPAAL template extended zith schedulers using the git links above:

		- Clone the git repository.
		- Enter the following commands:
			$ cd genom3-wcet (respect. cd uppaal_schedulers)
			$ autoreconf -vif
			$ mkdir build && cd build
			$ ../configure --prefix=/YOUR_INSTALLATION_PATH
			$ make install
		- Go to the repository where you cloned the case study and run: genom3 uppaal/model -sched=xy all.gen where you replace:
			- x with the type of scheduler: 1 for HRRN and 2 for cooperative EDF
			- y with the number of cores on the platform (a natural between 0 and 9) 
		- The .xta file will be generated in the model/ repository.
	- Adapt the "client" behavior according to your needs. Use the client behavior provided in robnav-artefact-edf.xta (process client) for reproducing the same experiment.

- Verification

	- Load the .xta and .q files using UPPAAL 4.1.19 and you are all set :) The .q file is sufficiently commented to guide you through the verification process (the comments will not show in UPPAAL, so you may simply open it using any text editor if you want to read the comments). You may tune the value of nc (number of cores) and observe how the properties evolve. 

---------------------------- 
4- Contact
----------------------------

Do not hesitate to drop me a line at mfoughal@laas.fr for any questions, inquiries or suggestions.
