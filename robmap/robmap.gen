#pragma requires  "robsim-genom3"
#pragma requires  "robloco-genom3"
#pragma requires  "roblaser-genom3"

#include "robsim/robsim-struct.idl"
#include "robloco/robloco-struct.idl"
#include "roblaser/roblaser-struct.idl"

#include "robmap-struct.idl"

/* -------------------------- MODULE DECLARATION --------------------------- */
component robmap {
  version  "1.0";
  email	  "felix@laas.fr";
  lang	  "c";

/* ------------- DEFINITION OF THE MODULE’s INTERNAL DATABASE -------------- */
 ids {
   robsim::map explored_map;	  // store the explored map in the IDS
   roblaser::laser current_laser; // store the latest laser map
 };

exception		INVALID_LASER;


/* ------------- DEFINITION OF THE MODULE’s INTERNAL DATABASE -------------- */

port out robsim::map E_explored_map;
port in roblaser::laser E_current_laser;

/* ------------------ TASK DEFINITION -------------------- */

task fuse {
 period	    robmap::task_period ms;
 priority   100;
 stack 	    4000;
 codel <start> InitMap(ids out explored_map) yield ether wcet 10 ms;
};

/* ------------------ SERVICES DEFINITION: The attributes -------------------- */
/*
attribute GetExploredMap(out explored_map)
{
  doc		"To get the ids explored_map content.";
};

attribute GetCurrentLaser(out current_laser)
{
  doc		"To get the ids current_laser content.";
};
*/
/* ------------------ SERVICES DEFINITION: The Functions -------------------- */
/*
function FuseStop()
{
 doc		"Stop map scanning.";
 interrupts 	FuseStart;
};


function PrintMap()
{
  codel          print_map(ids in explored_map);
  doc		"Print the IDS explored_map in readable format.";
};
*/
/* ------------------ SERVICES DEFINITION: The activities -------------------- */
/*
activity InitMapPort()
{
 doc 	 	      "Initialize the position port";
 codel <start> 	      InitMapPort(ids in explored_map, port out E_explored_map) yield ether wcet robmap::short_wcet ms;
 task 		      fuse;
};*/

activity FuseStart ()
{
 doc 	 	      "Start scaning the speed in the port Speed";
 codel <start> 	      FuseInit(port in E_current_laser) yield read_laser wcet 10 ms;
 codel <read_laser>   Fuse_read_laser(port in E_current_laser, ids out current_laser) yield fuse_map wcet 10 ms;
 codel <fuse_map>     Fuse_fuse_map(ids in current_laser, ids out explored_map, port out E_explored_map) yield pause::read_laser wcet 20 ms;
 codel <stop>         FuseStop() yield ether wcet 10 ms;
 interrupts 	      FuseStart;
 task 		      fuse;
 throw 		      INVALID_LASER;
};

};
